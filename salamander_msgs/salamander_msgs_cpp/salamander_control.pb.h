// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: salamander_control.proto

#ifndef PROTOBUF_salamander_5fcontrol_2eproto__INCLUDED
#define PROTOBUF_salamander_5fcontrol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "gazebo/msgs/time.pb.h"
#include "salamander_joints.pb.h"
// @@protoc_insertion_point(includes)

namespace salamander {
namespace msgs {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_salamander_5fcontrol_2eproto();
void protobuf_AssignDesc_salamander_5fcontrol_2eproto();
void protobuf_ShutdownFile_salamander_5fcontrol_2eproto();

class ControlAnalysis;
class JointCommands;
class JointConsumption;
class JointControl;
class SalamanderControl;

// ===================================================================

class SalamanderControl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:salamander.msgs.SalamanderControl) */ {
 public:
  SalamanderControl();
  virtual ~SalamanderControl();

  SalamanderControl(const SalamanderControl& from);

  inline SalamanderControl& operator=(const SalamanderControl& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SalamanderControl& default_instance();

  void Swap(SalamanderControl* other);

  // implements Message ----------------------------------------------

  inline SalamanderControl* New() const { return New(NULL); }

  SalamanderControl* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SalamanderControl& from);
  void MergeFrom(const SalamanderControl& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SalamanderControl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .salamander.msgs.JointControl joints = 1;
  int joints_size() const;
  void clear_joints();
  static const int kJointsFieldNumber = 1;
  const ::salamander::msgs::JointControl& joints(int index) const;
  ::salamander::msgs::JointControl* mutable_joints(int index);
  ::salamander::msgs::JointControl* add_joints();
  ::google::protobuf::RepeatedPtrField< ::salamander::msgs::JointControl >*
      mutable_joints();
  const ::google::protobuf::RepeatedPtrField< ::salamander::msgs::JointControl >&
      joints() const;

  // optional .salamander.msgs.ControlAnalysis analysis = 2;
  bool has_analysis() const;
  void clear_analysis();
  static const int kAnalysisFieldNumber = 2;
  const ::salamander::msgs::ControlAnalysis& analysis() const;
  ::salamander::msgs::ControlAnalysis* mutable_analysis();
  ::salamander::msgs::ControlAnalysis* release_analysis();
  void set_allocated_analysis(::salamander::msgs::ControlAnalysis* analysis);

  // @@protoc_insertion_point(class_scope:salamander.msgs.SalamanderControl)
 private:
  inline void set_has_analysis();
  inline void clear_has_analysis();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::salamander::msgs::JointControl > joints_;
  ::salamander::msgs::ControlAnalysis* analysis_;
  friend void  protobuf_AddDesc_salamander_5fcontrol_2eproto();
  friend void protobuf_AssignDesc_salamander_5fcontrol_2eproto();
  friend void protobuf_ShutdownFile_salamander_5fcontrol_2eproto();

  void InitAsDefaultInstance();
  static SalamanderControl* default_instance_;
};
// -------------------------------------------------------------------

class JointControl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:salamander.msgs.JointControl) */ {
 public:
  JointControl();
  virtual ~JointControl();

  JointControl(const JointControl& from);

  inline JointControl& operator=(const JointControl& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JointControl& default_instance();

  void Swap(JointControl* other);

  // implements Message ----------------------------------------------

  inline JointControl* New() const { return New(NULL); }

  JointControl* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JointControl& from);
  void MergeFrom(const JointControl& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(JointControl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated .salamander.msgs.JointCommands control = 2;
  int control_size() const;
  void clear_control();
  static const int kControlFieldNumber = 2;
  const ::salamander::msgs::JointCommands& control(int index) const;
  ::salamander::msgs::JointCommands* mutable_control(int index);
  ::salamander::msgs::JointCommands* add_control();
  ::google::protobuf::RepeatedPtrField< ::salamander::msgs::JointCommands >*
      mutable_control();
  const ::google::protobuf::RepeatedPtrField< ::salamander::msgs::JointCommands >&
      control() const;

  // @@protoc_insertion_point(class_scope:salamander.msgs.JointControl)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedPtrField< ::salamander::msgs::JointCommands > control_;
  friend void  protobuf_AddDesc_salamander_5fcontrol_2eproto();
  friend void protobuf_AssignDesc_salamander_5fcontrol_2eproto();
  friend void protobuf_ShutdownFile_salamander_5fcontrol_2eproto();

  void InitAsDefaultInstance();
  static JointControl* default_instance_;
};
// -------------------------------------------------------------------

class JointCommands : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:salamander.msgs.JointCommands) */ {
 public:
  JointCommands();
  virtual ~JointCommands();

  JointCommands(const JointCommands& from);

  inline JointCommands& operator=(const JointCommands& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JointCommands& default_instance();

  void Swap(JointCommands* other);

  // implements Message ----------------------------------------------

  inline JointCommands* New() const { return New(NULL); }

  JointCommands* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JointCommands& from);
  void MergeFrom(const JointCommands& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(JointCommands* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gazebo.msgs.Time time = 1;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  const ::gazebo::msgs::Time& time() const;
  ::gazebo::msgs::Time* mutable_time();
  ::gazebo::msgs::Time* release_time();
  void set_allocated_time(::gazebo::msgs::Time* time);

  // required .salamander.msgs.JointCmd commands = 2;
  bool has_commands() const;
  void clear_commands();
  static const int kCommandsFieldNumber = 2;
  const ::salamander::msgs::JointCmd& commands() const;
  ::salamander::msgs::JointCmd* mutable_commands();
  ::salamander::msgs::JointCmd* release_commands();
  void set_allocated_commands(::salamander::msgs::JointCmd* commands);

  // required double torque = 3;
  bool has_torque() const;
  void clear_torque();
  static const int kTorqueFieldNumber = 3;
  double torque() const;
  void set_torque(double value);

  // @@protoc_insertion_point(class_scope:salamander.msgs.JointCommands)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_commands();
  inline void clear_has_commands();
  inline void set_has_torque();
  inline void clear_has_torque();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::gazebo::msgs::Time* time_;
  ::salamander::msgs::JointCmd* commands_;
  double torque_;
  friend void  protobuf_AddDesc_salamander_5fcontrol_2eproto();
  friend void protobuf_AssignDesc_salamander_5fcontrol_2eproto();
  friend void protobuf_ShutdownFile_salamander_5fcontrol_2eproto();

  void InitAsDefaultInstance();
  static JointCommands* default_instance_;
};
// -------------------------------------------------------------------

class ControlAnalysis : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:salamander.msgs.ControlAnalysis) */ {
 public:
  ControlAnalysis();
  virtual ~ControlAnalysis();

  ControlAnalysis(const ControlAnalysis& from);

  inline ControlAnalysis& operator=(const ControlAnalysis& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ControlAnalysis& default_instance();

  void Swap(ControlAnalysis* other);

  // implements Message ----------------------------------------------

  inline ControlAnalysis* New() const { return New(NULL); }

  ControlAnalysis* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ControlAnalysis& from);
  void MergeFrom(const ControlAnalysis& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ControlAnalysis* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .salamander.msgs.JointConsumption joints_consumption = 1;
  int joints_consumption_size() const;
  void clear_joints_consumption();
  static const int kJointsConsumptionFieldNumber = 1;
  const ::salamander::msgs::JointConsumption& joints_consumption(int index) const;
  ::salamander::msgs::JointConsumption* mutable_joints_consumption(int index);
  ::salamander::msgs::JointConsumption* add_joints_consumption();
  ::google::protobuf::RepeatedPtrField< ::salamander::msgs::JointConsumption >*
      mutable_joints_consumption();
  const ::google::protobuf::RepeatedPtrField< ::salamander::msgs::JointConsumption >&
      joints_consumption() const;

  // @@protoc_insertion_point(class_scope:salamander.msgs.ControlAnalysis)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::salamander::msgs::JointConsumption > joints_consumption_;
  friend void  protobuf_AddDesc_salamander_5fcontrol_2eproto();
  friend void protobuf_AssignDesc_salamander_5fcontrol_2eproto();
  friend void protobuf_ShutdownFile_salamander_5fcontrol_2eproto();

  void InitAsDefaultInstance();
  static ControlAnalysis* default_instance_;
};
// -------------------------------------------------------------------

class JointConsumption : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:salamander.msgs.JointConsumption) */ {
 public:
  JointConsumption();
  virtual ~JointConsumption();

  JointConsumption(const JointConsumption& from);

  inline JointConsumption& operator=(const JointConsumption& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JointConsumption& default_instance();

  void Swap(JointConsumption* other);

  // implements Message ----------------------------------------------

  inline JointConsumption* New() const { return New(NULL); }

  JointConsumption* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JointConsumption& from);
  void MergeFrom(const JointConsumption& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(JointConsumption* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required double consumption = 2;
  bool has_consumption() const;
  void clear_consumption();
  static const int kConsumptionFieldNumber = 2;
  double consumption() const;
  void set_consumption(double value);

  // @@protoc_insertion_point(class_scope:salamander.msgs.JointConsumption)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_consumption();
  inline void clear_has_consumption();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  double consumption_;
  friend void  protobuf_AddDesc_salamander_5fcontrol_2eproto();
  friend void protobuf_AssignDesc_salamander_5fcontrol_2eproto();
  friend void protobuf_ShutdownFile_salamander_5fcontrol_2eproto();

  void InitAsDefaultInstance();
  static JointConsumption* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SalamanderControl

// repeated .salamander.msgs.JointControl joints = 1;
inline int SalamanderControl::joints_size() const {
  return joints_.size();
}
inline void SalamanderControl::clear_joints() {
  joints_.Clear();
}
inline const ::salamander::msgs::JointControl& SalamanderControl::joints(int index) const {
  // @@protoc_insertion_point(field_get:salamander.msgs.SalamanderControl.joints)
  return joints_.Get(index);
}
inline ::salamander::msgs::JointControl* SalamanderControl::mutable_joints(int index) {
  // @@protoc_insertion_point(field_mutable:salamander.msgs.SalamanderControl.joints)
  return joints_.Mutable(index);
}
inline ::salamander::msgs::JointControl* SalamanderControl::add_joints() {
  // @@protoc_insertion_point(field_add:salamander.msgs.SalamanderControl.joints)
  return joints_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::salamander::msgs::JointControl >*
SalamanderControl::mutable_joints() {
  // @@protoc_insertion_point(field_mutable_list:salamander.msgs.SalamanderControl.joints)
  return &joints_;
}
inline const ::google::protobuf::RepeatedPtrField< ::salamander::msgs::JointControl >&
SalamanderControl::joints() const {
  // @@protoc_insertion_point(field_list:salamander.msgs.SalamanderControl.joints)
  return joints_;
}

// optional .salamander.msgs.ControlAnalysis analysis = 2;
inline bool SalamanderControl::has_analysis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SalamanderControl::set_has_analysis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SalamanderControl::clear_has_analysis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SalamanderControl::clear_analysis() {
  if (analysis_ != NULL) analysis_->::salamander::msgs::ControlAnalysis::Clear();
  clear_has_analysis();
}
inline const ::salamander::msgs::ControlAnalysis& SalamanderControl::analysis() const {
  // @@protoc_insertion_point(field_get:salamander.msgs.SalamanderControl.analysis)
  return analysis_ != NULL ? *analysis_ : *default_instance_->analysis_;
}
inline ::salamander::msgs::ControlAnalysis* SalamanderControl::mutable_analysis() {
  set_has_analysis();
  if (analysis_ == NULL) {
    analysis_ = new ::salamander::msgs::ControlAnalysis;
  }
  // @@protoc_insertion_point(field_mutable:salamander.msgs.SalamanderControl.analysis)
  return analysis_;
}
inline ::salamander::msgs::ControlAnalysis* SalamanderControl::release_analysis() {
  // @@protoc_insertion_point(field_release:salamander.msgs.SalamanderControl.analysis)
  clear_has_analysis();
  ::salamander::msgs::ControlAnalysis* temp = analysis_;
  analysis_ = NULL;
  return temp;
}
inline void SalamanderControl::set_allocated_analysis(::salamander::msgs::ControlAnalysis* analysis) {
  delete analysis_;
  analysis_ = analysis;
  if (analysis) {
    set_has_analysis();
  } else {
    clear_has_analysis();
  }
  // @@protoc_insertion_point(field_set_allocated:salamander.msgs.SalamanderControl.analysis)
}

// -------------------------------------------------------------------

// JointControl

// required string name = 1;
inline bool JointControl::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JointControl::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JointControl::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JointControl::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& JointControl::name() const {
  // @@protoc_insertion_point(field_get:salamander.msgs.JointControl.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JointControl::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:salamander.msgs.JointControl.name)
}
inline void JointControl::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:salamander.msgs.JointControl.name)
}
inline void JointControl::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:salamander.msgs.JointControl.name)
}
inline ::std::string* JointControl::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:salamander.msgs.JointControl.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JointControl::release_name() {
  // @@protoc_insertion_point(field_release:salamander.msgs.JointControl.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JointControl::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:salamander.msgs.JointControl.name)
}

// repeated .salamander.msgs.JointCommands control = 2;
inline int JointControl::control_size() const {
  return control_.size();
}
inline void JointControl::clear_control() {
  control_.Clear();
}
inline const ::salamander::msgs::JointCommands& JointControl::control(int index) const {
  // @@protoc_insertion_point(field_get:salamander.msgs.JointControl.control)
  return control_.Get(index);
}
inline ::salamander::msgs::JointCommands* JointControl::mutable_control(int index) {
  // @@protoc_insertion_point(field_mutable:salamander.msgs.JointControl.control)
  return control_.Mutable(index);
}
inline ::salamander::msgs::JointCommands* JointControl::add_control() {
  // @@protoc_insertion_point(field_add:salamander.msgs.JointControl.control)
  return control_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::salamander::msgs::JointCommands >*
JointControl::mutable_control() {
  // @@protoc_insertion_point(field_mutable_list:salamander.msgs.JointControl.control)
  return &control_;
}
inline const ::google::protobuf::RepeatedPtrField< ::salamander::msgs::JointCommands >&
JointControl::control() const {
  // @@protoc_insertion_point(field_list:salamander.msgs.JointControl.control)
  return control_;
}

// -------------------------------------------------------------------

// JointCommands

// required .gazebo.msgs.Time time = 1;
inline bool JointCommands::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JointCommands::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JointCommands::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JointCommands::clear_time() {
  if (time_ != NULL) time_->::gazebo::msgs::Time::Clear();
  clear_has_time();
}
inline const ::gazebo::msgs::Time& JointCommands::time() const {
  // @@protoc_insertion_point(field_get:salamander.msgs.JointCommands.time)
  return time_ != NULL ? *time_ : *default_instance_->time_;
}
inline ::gazebo::msgs::Time* JointCommands::mutable_time() {
  set_has_time();
  if (time_ == NULL) {
    time_ = new ::gazebo::msgs::Time;
  }
  // @@protoc_insertion_point(field_mutable:salamander.msgs.JointCommands.time)
  return time_;
}
inline ::gazebo::msgs::Time* JointCommands::release_time() {
  // @@protoc_insertion_point(field_release:salamander.msgs.JointCommands.time)
  clear_has_time();
  ::gazebo::msgs::Time* temp = time_;
  time_ = NULL;
  return temp;
}
inline void JointCommands::set_allocated_time(::gazebo::msgs::Time* time) {
  delete time_;
  time_ = time;
  if (time) {
    set_has_time();
  } else {
    clear_has_time();
  }
  // @@protoc_insertion_point(field_set_allocated:salamander.msgs.JointCommands.time)
}

// required .salamander.msgs.JointCmd commands = 2;
inline bool JointCommands::has_commands() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JointCommands::set_has_commands() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JointCommands::clear_has_commands() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JointCommands::clear_commands() {
  if (commands_ != NULL) commands_->::salamander::msgs::JointCmd::Clear();
  clear_has_commands();
}
inline const ::salamander::msgs::JointCmd& JointCommands::commands() const {
  // @@protoc_insertion_point(field_get:salamander.msgs.JointCommands.commands)
  return commands_ != NULL ? *commands_ : *default_instance_->commands_;
}
inline ::salamander::msgs::JointCmd* JointCommands::mutable_commands() {
  set_has_commands();
  if (commands_ == NULL) {
    commands_ = new ::salamander::msgs::JointCmd;
  }
  // @@protoc_insertion_point(field_mutable:salamander.msgs.JointCommands.commands)
  return commands_;
}
inline ::salamander::msgs::JointCmd* JointCommands::release_commands() {
  // @@protoc_insertion_point(field_release:salamander.msgs.JointCommands.commands)
  clear_has_commands();
  ::salamander::msgs::JointCmd* temp = commands_;
  commands_ = NULL;
  return temp;
}
inline void JointCommands::set_allocated_commands(::salamander::msgs::JointCmd* commands) {
  delete commands_;
  commands_ = commands;
  if (commands) {
    set_has_commands();
  } else {
    clear_has_commands();
  }
  // @@protoc_insertion_point(field_set_allocated:salamander.msgs.JointCommands.commands)
}

// required double torque = 3;
inline bool JointCommands::has_torque() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JointCommands::set_has_torque() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JointCommands::clear_has_torque() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JointCommands::clear_torque() {
  torque_ = 0;
  clear_has_torque();
}
inline double JointCommands::torque() const {
  // @@protoc_insertion_point(field_get:salamander.msgs.JointCommands.torque)
  return torque_;
}
inline void JointCommands::set_torque(double value) {
  set_has_torque();
  torque_ = value;
  // @@protoc_insertion_point(field_set:salamander.msgs.JointCommands.torque)
}

// -------------------------------------------------------------------

// ControlAnalysis

// repeated .salamander.msgs.JointConsumption joints_consumption = 1;
inline int ControlAnalysis::joints_consumption_size() const {
  return joints_consumption_.size();
}
inline void ControlAnalysis::clear_joints_consumption() {
  joints_consumption_.Clear();
}
inline const ::salamander::msgs::JointConsumption& ControlAnalysis::joints_consumption(int index) const {
  // @@protoc_insertion_point(field_get:salamander.msgs.ControlAnalysis.joints_consumption)
  return joints_consumption_.Get(index);
}
inline ::salamander::msgs::JointConsumption* ControlAnalysis::mutable_joints_consumption(int index) {
  // @@protoc_insertion_point(field_mutable:salamander.msgs.ControlAnalysis.joints_consumption)
  return joints_consumption_.Mutable(index);
}
inline ::salamander::msgs::JointConsumption* ControlAnalysis::add_joints_consumption() {
  // @@protoc_insertion_point(field_add:salamander.msgs.ControlAnalysis.joints_consumption)
  return joints_consumption_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::salamander::msgs::JointConsumption >*
ControlAnalysis::mutable_joints_consumption() {
  // @@protoc_insertion_point(field_mutable_list:salamander.msgs.ControlAnalysis.joints_consumption)
  return &joints_consumption_;
}
inline const ::google::protobuf::RepeatedPtrField< ::salamander::msgs::JointConsumption >&
ControlAnalysis::joints_consumption() const {
  // @@protoc_insertion_point(field_list:salamander.msgs.ControlAnalysis.joints_consumption)
  return joints_consumption_;
}

// -------------------------------------------------------------------

// JointConsumption

// required string name = 1;
inline bool JointConsumption::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JointConsumption::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JointConsumption::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JointConsumption::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& JointConsumption::name() const {
  // @@protoc_insertion_point(field_get:salamander.msgs.JointConsumption.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JointConsumption::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:salamander.msgs.JointConsumption.name)
}
inline void JointConsumption::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:salamander.msgs.JointConsumption.name)
}
inline void JointConsumption::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:salamander.msgs.JointConsumption.name)
}
inline ::std::string* JointConsumption::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:salamander.msgs.JointConsumption.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JointConsumption::release_name() {
  // @@protoc_insertion_point(field_release:salamander.msgs.JointConsumption.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JointConsumption::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:salamander.msgs.JointConsumption.name)
}

// required double consumption = 2;
inline bool JointConsumption::has_consumption() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JointConsumption::set_has_consumption() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JointConsumption::clear_has_consumption() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JointConsumption::clear_consumption() {
  consumption_ = 0;
  clear_has_consumption();
}
inline double JointConsumption::consumption() const {
  // @@protoc_insertion_point(field_get:salamander.msgs.JointConsumption.consumption)
  return consumption_;
}
inline void JointConsumption::set_consumption(double value) {
  set_has_consumption();
  consumption_ = value;
  // @@protoc_insertion_point(field_set:salamander.msgs.JointConsumption.consumption)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace salamander

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_salamander_5fcontrol_2eproto__INCLUDED
