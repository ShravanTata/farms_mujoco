// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: salamander_kinematics.proto

#ifndef PROTOBUF_salamander_5fkinematics_2eproto__INCLUDED
#define PROTOBUF_salamander_5fkinematics_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "salamander_links.pb.h"
#include "salamander_joints.pb.h"
// @@protoc_insertion_point(includes)

namespace salamander {
namespace msgs {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_salamander_5fkinematics_2eproto();
void protobuf_AssignDesc_salamander_5fkinematics_2eproto();
void protobuf_ShutdownFile_salamander_5fkinematics_2eproto();

class ModelKinematics;

// ===================================================================

class ModelKinematics : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:salamander.msgs.ModelKinematics) */ {
 public:
  ModelKinematics();
  virtual ~ModelKinematics();

  ModelKinematics(const ModelKinematics& from);

  inline ModelKinematics& operator=(const ModelKinematics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModelKinematics& default_instance();

  void Swap(ModelKinematics* other);

  // implements Message ----------------------------------------------

  inline ModelKinematics* New() const { return New(NULL); }

  ModelKinematics* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModelKinematics& from);
  void MergeFrom(const ModelKinematics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModelKinematics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .salamander.msgs.LinkKinematics links = 1;
  int links_size() const;
  void clear_links();
  static const int kLinksFieldNumber = 1;
  const ::salamander::msgs::LinkKinematics& links(int index) const;
  ::salamander::msgs::LinkKinematics* mutable_links(int index);
  ::salamander::msgs::LinkKinematics* add_links();
  ::google::protobuf::RepeatedPtrField< ::salamander::msgs::LinkKinematics >*
      mutable_links();
  const ::google::protobuf::RepeatedPtrField< ::salamander::msgs::LinkKinematics >&
      links() const;

  // repeated .salamander.msgs.JointKinematics joints = 2;
  int joints_size() const;
  void clear_joints();
  static const int kJointsFieldNumber = 2;
  const ::salamander::msgs::JointKinematics& joints(int index) const;
  ::salamander::msgs::JointKinematics* mutable_joints(int index);
  ::salamander::msgs::JointKinematics* add_joints();
  ::google::protobuf::RepeatedPtrField< ::salamander::msgs::JointKinematics >*
      mutable_joints();
  const ::google::protobuf::RepeatedPtrField< ::salamander::msgs::JointKinematics >&
      joints() const;

  // @@protoc_insertion_point(class_scope:salamander.msgs.ModelKinematics)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::salamander::msgs::LinkKinematics > links_;
  ::google::protobuf::RepeatedPtrField< ::salamander::msgs::JointKinematics > joints_;
  friend void  protobuf_AddDesc_salamander_5fkinematics_2eproto();
  friend void protobuf_AssignDesc_salamander_5fkinematics_2eproto();
  friend void protobuf_ShutdownFile_salamander_5fkinematics_2eproto();

  void InitAsDefaultInstance();
  static ModelKinematics* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ModelKinematics

// repeated .salamander.msgs.LinkKinematics links = 1;
inline int ModelKinematics::links_size() const {
  return links_.size();
}
inline void ModelKinematics::clear_links() {
  links_.Clear();
}
inline const ::salamander::msgs::LinkKinematics& ModelKinematics::links(int index) const {
  // @@protoc_insertion_point(field_get:salamander.msgs.ModelKinematics.links)
  return links_.Get(index);
}
inline ::salamander::msgs::LinkKinematics* ModelKinematics::mutable_links(int index) {
  // @@protoc_insertion_point(field_mutable:salamander.msgs.ModelKinematics.links)
  return links_.Mutable(index);
}
inline ::salamander::msgs::LinkKinematics* ModelKinematics::add_links() {
  // @@protoc_insertion_point(field_add:salamander.msgs.ModelKinematics.links)
  return links_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::salamander::msgs::LinkKinematics >*
ModelKinematics::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:salamander.msgs.ModelKinematics.links)
  return &links_;
}
inline const ::google::protobuf::RepeatedPtrField< ::salamander::msgs::LinkKinematics >&
ModelKinematics::links() const {
  // @@protoc_insertion_point(field_list:salamander.msgs.ModelKinematics.links)
  return links_;
}

// repeated .salamander.msgs.JointKinematics joints = 2;
inline int ModelKinematics::joints_size() const {
  return joints_.size();
}
inline void ModelKinematics::clear_joints() {
  joints_.Clear();
}
inline const ::salamander::msgs::JointKinematics& ModelKinematics::joints(int index) const {
  // @@protoc_insertion_point(field_get:salamander.msgs.ModelKinematics.joints)
  return joints_.Get(index);
}
inline ::salamander::msgs::JointKinematics* ModelKinematics::mutable_joints(int index) {
  // @@protoc_insertion_point(field_mutable:salamander.msgs.ModelKinematics.joints)
  return joints_.Mutable(index);
}
inline ::salamander::msgs::JointKinematics* ModelKinematics::add_joints() {
  // @@protoc_insertion_point(field_add:salamander.msgs.ModelKinematics.joints)
  return joints_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::salamander::msgs::JointKinematics >*
ModelKinematics::mutable_joints() {
  // @@protoc_insertion_point(field_mutable_list:salamander.msgs.ModelKinematics.joints)
  return &joints_;
}
inline const ::google::protobuf::RepeatedPtrField< ::salamander::msgs::JointKinematics >&
ModelKinematics::joints() const {
  // @@protoc_insertion_point(field_list:salamander.msgs.ModelKinematics.joints)
  return joints_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace salamander

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_salamander_5fkinematics_2eproto__INCLUDED
